import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import matplotlib.gridspec as gridspec
import math
import glob


# support functions
def get_vect(data_array):
    return np.array(
        [
            float(data_array.split()[1]),
            float(data_array.split()[2]),
            float(data_array.split()[3]),
        ]
    )


def get_vect_length(coords: np.array):
    return math.sqrt(sum(coords**2))


def extract_data(subpath: str, states: list = [3, 4], r_vel_states_number=6):
    """
    This function exctract information from .log files generated by Gaussian

    data_r_vel.xlsx  - contains information about R_vel
    data_elect_dipole.xlsx - contains information about electrical dipoles
    data_magnet_dipole.xlsx - contains information about magnetic dipoles
    data_em_angle.xlsx - contains information about the angle between electrical dipoles and magnetic dipoles
    data_homo_lumo.xlsx - contains information about HOMO and LUMO orbitals

    Parameters:
    - subpath (str): path to folder that conatains all .log files that need to be extragated
    - states (list): List of states needed. Default [3, 4]
    - r_vel_states_numbe (int) - number of r_vel needed to be extragated. Default 6

    Returns:
    generates 5 .xlsx files:
    - data_r_vel.xlsx  - contains information about R_vel
    - data_elect_dipole.xlsx - contains information about electrical dipoles
    - data_magnet_dipole.xlsx - contains information about magnetic dipoles
    - data_em_angle.xlsx - contains information about the angle between electrical dipoles and magnetic dipoles
    - data_homo_lumo.xlsx - contains information about HOMO and LUMO orbitals
    """
    # states = [3, 4, 5, 6]
    states = states
    r_vel_states_number = r_vel_states_number
    path = subpath + r"*.log"
    files = glob.glob(path)
    print(files)
    file_num = []
    r_vel_arr = []
    r_len_arr = []
    alpha_occ_arr_1 = []
    alpha_occ_arr_2 = []
    alpha_vir_arr_1 = []
    alpha_vir_arr_2 = []
    file_num_state = []
    state_arr = []
    ev_arr = []
    nm_arr = []
    f_arr = []
    elect = []
    magnet = []
    em = []
    states_counter = []

    for a in files:  # range(5, 7):
        with open(a, "r") as f:  # (PATH + str(a)+'.log', 'r') as f:
            data_file = f.readlines()
            for i, line in enumerate(data_file, start=1):
                if "transition electric dipole moments" in line:
                    for state in states:
                        elect.append(get_vect(data_file[i + state]))
                        states_counter.append(state)

                if "transition magnetic dipole moments" in line:
                    for state in states:
                        magnet.append(get_vect(data_file[i + state]))

                if (
                    "0|del|b> * <b|rxdel|0> + <0|del|b> * <b|delr+rdel|0>" in line
                ):  #' Rotatory Strengths (R) in cgs (10**-40 erg-esu-cm/Gauss)
                    for state in states:
                        em.append(float(data_file[i + state + 1].split()[5]))

                    for j in range(2, 2 + r_vel_states_number):
                        r_vel_arr.append(float(data_file[i + j].split()[4]))

                if "1/2[<0|r|b>*<b|rxdel|0> + (<0|rxdel|b>*<b|r|0>)*]" in line:
                    for j in range(2, 2 + r_vel_states_number):
                        r_len_arr.append(float(data_file[i + j].split()[4]))

                if "Singlet-A" in line:  #  Excitation energies and oscillator strengths
                    state_singlet = line.split()[2]
                    ev = float(line.split()[4])
                    nm = float(line.split()[6])
                    f = float(line.split()[8].split("=")[1])

                    file_num_state.append(a)
                    state_arr.append(state_singlet)
                    ev_arr.append(ev)
                    nm_arr.append(nm)
                    f_arr.append(f)

                if "Alpha virt. eigenvalues" in line:
                    temp = data_file[i - 2]
                    alpha_vir_1 = float(data_file[i - 1].split()[4]) * 27.2114
                    alpha_vir_2 = float(data_file[i - 1].split()[5]) * 27.2114

                    if len(temp.split()) <= 5:
                        alpha_occ_2 = float(temp.split()[-1]) * 27.2114
                        alpha_occ_1 = float(data_file[i - 3].split()[-1]) * 27.2114
                        break
                    else:
                        alpha_occ_1 = float(temp.split()[-2]) * 27.2114
                        alpha_occ_2 = float(temp.split()[-1]) * 27.2114
                        break

            file_num.append(a)

            alpha_occ_arr_1.append(alpha_occ_1)
            alpha_occ_arr_2.append(alpha_occ_2)
            alpha_vir_arr_1.append(alpha_vir_1)
            alpha_vir_arr_2.append(alpha_vir_2)

            data_1 = pd.DataFrame(
                {
                    "file": file_num_state,
                    "state": state_arr,
                    "nm": nm_arr,
                    "ev": ev_arr,
                    "f": f_arr,
                    "r_vel": r_vel_arr,
                    "r_len": r_len_arr,
                }
            )

            data_2 = pd.DataFrame({"file": file_num})
            data_2_temp = pd.DataFrame({"states": states_counter, "elect": elect})
            for s in data_2_temp.states.unique():
                data_2_temp_t = (
                    data_2_temp[data_2_temp["states"] == s]
                    .reset_index()
                    .drop(["index", "states"], axis=1)
                )
                data_2_temp_t.columns = [str(s) + "_elect"]
                data_2_temp_t[f"elect_{s}_length"] = data_2_temp_t[
                    str(s) + "_elect"
                ].apply(get_vect_length)
                data_2 = data_2.join(data_2_temp_t)

            data_3 = pd.DataFrame({"file": file_num})
            data_3_temp = pd.DataFrame({"states": states_counter, "magnet": magnet})
            for s in data_3_temp.states.unique():
                data_3_temp_t = (
                    data_3_temp[data_3_temp["states"] == s]
                    .reset_index()
                    .drop(["index", "states"], axis=1)
                )
                data_3_temp_t.columns = [str(s) + "_magnet"]
                data_3_temp_t[f"magnet_{s}_length"] = data_3_temp_t[
                    str(s) + "_magnet"
                ].apply(get_vect_length)
                data_3 = data_3.join(data_3_temp_t)

            data_4 = pd.DataFrame({"file": file_num})
            data_4_temp = pd.DataFrame({"states": states_counter, "em": em})
            for s in data_3_temp.states.unique():
                data_4_temp_t = (
                    data_4_temp[data_4_temp["states"] == s]
                    .reset_index()
                    .drop(["index", "states"], axis=1)
                )
                data_4_temp_t.columns = [str(s) + "_em"]
                data_4 = data_4.join(data_4_temp_t)

            data_5 = pd.DataFrame(
                {
                    "file": file_num,
                    "occ_1": alpha_occ_arr_1,
                    "occ_2": alpha_occ_arr_2,
                    "vir_1": alpha_vir_arr_1,
                    "vir_2": alpha_vir_arr_2,
                }
            )

        data_1.to_excel(subpath + "/data_r_vel.xlsx", index=False)
        data_2.to_excel(subpath + "/data_elect_dipole.xlsx", index=False)
        data_3.to_excel(subpath + "/data_magnet_dipole.xlsx", index=False)
        data_4.to_excel(subpath + "/data_em_angle.xlsx", index=False)
        data_5.to_excel(subpath + "/data_homo_lumo.xlsx", index=False)


def get_orbitals_chart(
    subpath: str,
    x_title: str = "",
    y_lim_1: list = None,
    y_lim_2: list = None,
    conformers_names: bool = False,
):
    """
    Creates a chart for HOMO - LUMO orbitals by taking data from data_homo_lumo.xlsx file

        Parameters:
    - subpath (str): path to folder that conatains data_homo_lumo.xlsx file
    - x_title (str): X title of the chart is "Dihedral angle" + x_title + ", degree". Default "
    - y_lim_1 (list) - list of 2 numbers for HOMO chart [lower_limit, upper_limit]. Default None
    - y_lim_2 (list) - list of 2 numbers for LUMO chart [lower_limit, upper_limit]. Default None
    - conformers_names (bool) - if all conformer names are int (rotation angles etc) - True, else - False. Default - False

        Returns:
    - creates a folder images (if not creates) and saves /images/orbitals.png chart
    """
    if not os.path.exists(subpath + "/images/"):
        os.makedirs(subpath + "/images/")
    else:
        print(f"Folder images already exists.")

    if x_title == "":
        try:
            with open(subpath + "discription.txt", "r") as f:
                data_file = f.readlines()
                x_title = data_file[0].split()[0]
        except:
            print("Create discription.txt file contatining ")
            x_title = ""

    # 1.  HOMO-LUMO orbitales
    data_h_l = pd.read_excel(subpath + "/data_homo_lumo.xlsx")
    if conformers_names:
        data_h_l["name"] = data_h_l["file"].apply(
            lambda x: x.split("/")[-1].split("\\")[-1].split(".")[0]
        )

    else:
        data_h_l["name"] = data_h_l["file"].apply(
            lambda x: int(x.split("/")[-1].split("\\")[-1].split(".")[0])
        )

    data_h_l = data_h_l.sort_values(by="name")

    # step = np.round(abs(y_lim_1[0]-y_lim_1[1])/2, 2)
    if y_lim_1 != None and y_lim_2 != None:
        step = np.round(
            abs(y_lim_1[0] - y_lim_1[1]) / 5, 2
        )  # # step can be changed by replacing this parameter with any fixed one or changing round, devision
        gs = gridspec.GridSpec(
            2,
            1,
            height_ratios=[1, (y_lim_2[0] - y_lim_2[1]) / (y_lim_1[0] - y_lim_1[1])],
        )
    else:
        gs = gridspec.GridSpec(2, 1, height_ratios=[1, 2])

    # First plot
    plt.subplot(gs[0])  # old size
    plt.scatter(
        data_h_l.name, data_h_l.vir_1, marker="_", s=400, color="red", linewidth=2
    )
    plt.scatter(
        data_h_l.name, data_h_l.vir_2, marker="_", s=400, color="red", linewidth=2
    )

    plt.grid(False)
    plt.xticks(data_h_l.name, fontsize=11)
    plt.ylabel("Energy, eV", fontsize=14, fontweight="bold")
    if y_lim_1 != None:
        plt.yticks(np.arange(y_lim_1[0], y_lim_1[1] + step, step), fontsize=10)

    # Second plot
    plt.subplot(gs[1])  # old size
    plt.xlabel("Dihedral angle" + x_title + ", degree", fontsize=15, fontweight="bold")
    # plt.xlabel( x_title , fontsize=15, fontweight='bold')
    plt.ylabel("Energy, eV", fontsize=14, fontweight="bold")
    plt.grid(False)

    plt.scatter(
        data_h_l.name, data_h_l.occ_1, marker="_", s=400, color="blue", linewidth=2
    )
    plt.scatter(
        data_h_l.name, data_h_l.occ_2, marker="_", s=400, color="blue", linewidth=2
    )

    plt.xticks(data_h_l.name, fontsize=11)
    if y_lim_1 != None:
        plt.yticks(np.arange(y_lim_2[0], y_lim_2[1] + step, step), fontsize=10)
    plt.savefig(subpath + "/images/orbitals.png", dpi=300)
    plt.show()


def get_rvel_chart(
    subpath: str,
    states: list = [3, 4],
    x_title: str = "",
    y_lim: list = None,
    show_legend: bool = True,
    conformers_names: bool = False,
):
    """
    Creates a chart for R_vel by taking data from data_r_vel.xlsx file

        Parameters:
    - subpath (str): path to folder that conatains data_r_vel.xlsx file
    - states (list): List of states needed to be on the plot. Default [3, 4]
    - x_title (str): X title of the chart is "Dihedral angle" + x_title + ", degree" Default ""
    - y_lim (list): list of 2 numbers [lower_limit, upper_limit]. Default None
    - show_legend (bool): If True - shows legend, False - does not show legend. Default True
    - conformers_names (bool) - if all conformer names are int (rotation angles etc) - True, else - False. Default - False

        Returns:
    - creates a folder images (if not creates) and saves /images/r_vel.png chart
    """

    if not os.path.exists(subpath + "/images/"):
        os.makedirs(subpath + "/images/")
    else:
        print(f"Folder images already exists.")

    if x_title == "":
        try:
            with open(subpath + "/discription.txt", "r") as f:
                data_file = f.readlines()
                x_title = data_file[0].split()[0]
        except:
            print("Create discription.txt file contatining ")
            x_title = ""

    data_rvel = pd.read_excel(subpath + "data_r_vel.xlsx")
    if conformers_names:
        data_rvel["name"] = data_rvel["file"].apply(
            lambda x: x.split("/")[-1].split("\\")[-1].split(".")[0]
        )
    else:
        data_rvel["name"] = data_rvel["file"].apply(
            lambda x: int(x.split("/")[-1].split("\\")[-1].split(".")[0])
        )

    data_rvel = data_rvel.sort_values(by="name")
    for s in states:
        data_rvel_tmp = data_rvel[data_rvel["state"] == f"{s}:"]
        plt.plot(data_rvel_tmp["name"], data_rvel_tmp["r_vel"], marker="o")
    plt.xlabel("Dihedral angle" + x_title + ", degree", fontsize=14, fontweight="bold")
    plt.ylabel("Rotatory strength, cgs", fontsize=14, fontweight="bold")
    if show_legend:
        plt.legend(states, loc="upper right", frameon=False)

    plt.grid(False)
    if y_lim != None:
        plt.ylim(y_lim[0], y_lim[1])
    plt.xticks(data_rvel_tmp.name, fontsize=11)
    plt.yticks(fontsize=11)
    plt.savefig(subpath + "/images/r_vel.png", dpi=300)
    plt.show()


def get_elect_dipole_chart(
    subpath: str,
    states: list = [3, 4],
    x_title: str = "",
    y_lim: list = None,
    fig_width: int = None,
    conformers_names: bool = False,
):
    """
    Creates a chart for electrical dipole by taking data from data_elect_dipole.xlsx file

        Parameters:
    - subpath (str): path to folder that conatains data_elect_dipole.xlsx file
    - states (list): List of states needed to be on the plot. Default [3, 4]
    - x_title (str): X title of the chart is "Dihedral angle" + x_title + ", degree" Default ""
    - y_lim (list): list of 2 numbers [lower_limit, upper_limit]. Default None
    -  fig_width: (int): width of the chart. Default None
    - conformers_names (bool) - if all conformer names are int (rotation angles etc) - True, else - False. Default - False

        Returns:
    - creates a folder images (if not creates) and saves /images/elect_dipole.png chart


    """

    try:
        os.mkdir(subpath + "/images/")
    except:
        print("Folder /images exists")

    if x_title == "":
        try:
            with open(subpath + "/discription.txt", "r") as f:
                data_file = f.readlines()
                x_title = data_file[0].split()[0]
        except:
            print("Create discription.txt file contatining ")
            x_title = ""

    data_e = pd.read_excel(subpath + "data_elect_dipole.xlsx")
    if conformers_names:
        data_e["name"] = data_e["file"].apply(
            lambda x: x.split("/")[-1].split("\\")[-1].split(".")[0]
        )
    else:
        data_e["name"] = data_e["file"].apply(
            lambda x: int(x.split("/")[-1].split("\\")[-1].split(".")[0])
        )

    data_e = data_e.sort_values(by="name")
    if fig_width != None:
        plt.figure(figsize=(fig_width, fig_width / 2.5))

    for s in states:
        plt.plot(data_e["name"], data_e[f"elect_{s}_length"], marker="o")

    plt.xlabel("Dihedral angle" + x_title + ", degree", fontsize=14, fontweight="bold")
    plt.ylabel(
        "Transition electric dipole moments, a.u.", fontsize=12, fontweight="bold"
    )
    plt.legend(states, loc="upper right", frameon=False)
    plt.grid(False)
    plt.xticks(data_e.name)
    if y_lim != None:
        plt.ylim(y_lim[0], y_lim[1])
    plt.savefig(subpath + "/images/elect_dipole.png", dpi=300)
    plt.show()


def get_magnet_dipole_chart(
    subpath: str,
    states: list = [3, 4],
    x_title: str = "",
    y_lim: list = None,
    fig_width: int = None,
    conformers_names: bool = False,
):
    """

    Creates a chart for magnetic dipole by taking data from data_magnet_dipole.xlsx file

        Parameters:
    - subpath (str): path to folder that conatains data_magnet_dipole.xlsx file
    - states (list): List of states needed to be on the plot. Default [3, 4]
    - x_title (str): X title of the chart is "Dihedral angle" + x_title + ", degree" Default ""
    - y_lim (list): list of 2 numbers [lower_limit, upper_limit]. Default None
    -  fig_width: (int): width of the chart. Default None
    - conformers_names (bool) - if all conformer names are int (rotation angles etc) - True, else - False. Default - False

        Returns:
    - creates a folder images (if not creates) and saves /images/magnet_dipole.png chart

    """

    try:
        os.mkdir(subpath + "/images/")
    except:
        print("Folder /images exists")

    if x_title == "":
        try:
            with open(subpath + "/discription.txt", "r") as f:
                data_file = f.readlines()
                x_title = data_file[0].split()[0]
        except:
            print("Create discription.txt file contatining ")
            x_title = ""

    data_m = pd.read_excel(subpath + "data_magnet_dipole.xlsx")
    if conformers_names:
        data_m["name"] = data_m["file"].apply(
            lambda x: x.split("/")[-1].split("\\")[-1].split(".")[0]
        )
    else:
        data_m["name"] = data_m["file"].apply(
            lambda x: int(x.split("/")[-1].split("\\")[-1].split(".")[0])
        )

    data_m = data_m.sort_values(by="name")
    if fig_width != None:
        plt.figure(figsize=(fig_width, fig_width / 2.5))

    for s in states:
        plt.plot(data_m["name"], data_m[f"magnet_{s}_length"], marker="o")

    plt.xlabel("Dihedral angle " + x_title + ", degree", fontsize=14, fontweight="bold")
    plt.ylabel(
        "Transition magnetic dipole moments, a.u.", fontsize=12, fontweight="bold"
    )
    plt.legend(states, loc="upper right", frameon=False)
    plt.grid(False)
    plt.xticks(data_m.name)
    if y_lim != None:
        plt.ylim(y_lim[0], y_lim[1])
    plt.savefig(subpath + "/images/magnet_dipole.png", dpi=300)
    plt.show()


def get_em_angle_chart(
    subpath: str,
    states: list = [3, 4],
    x_title: str = "",
    y_lim: list = None,
    fig_width: int = None,
    show_legend: bool = True,
    conformers_names: bool = False,
):
    """
    Creates a chart for angle between electric and magnetic dipole by taking data from data_em_angle.xlsx file

        Parameters:
    - subpath (str): path to folder that conatains data_em_angle.xlsx file
    - states (list): List of states needed to be on the plot. Default [3, 4]
    - x_title (str): X title of the chart is "Dihedral angle" + x_title + ", degree" Default ""
    - y_lim (list): list of 2 numbers [lower_limit, upper_limit]. Default None
    -  fig_width: (int): width of the chart. Default None
    - show_legend (bool): If True - shows legend, False - does not show legend. Default True
    - conformers_names (bool) - if all conformer names are int (rotation angles etc) - True, else - False. Default - False

        Returns:
    - creates a folder images (if not creates) and saves /images/em_angle.png chart

    """
    try:
        os.mkdir(subpath + "/images/")
    except:
        print("Folder /images exists")

    if x_title == "":
        try:
            with open(subpath + "/discription.txt", "r") as f:
                data_file = f.readlines()
                x_title = data_file[0].split()[0]
        except:
            print("Create discription.txt file contatining ")
            x_title = ""

    data_em = pd.read_excel(subpath + "data_em_angle.xlsx")

    if conformers_names:
        data_em["name"] = data_em["file"].apply(
            lambda x: x.split("/")[-1].split("\\")[-1].split(".")[0]
        )
    else:
        data_em["name"] = data_em["file"].apply(
            lambda x: int(x.split("/")[-1].split("\\")[-1].split(".")[0])
        )

    data_em = data_em.sort_values(by="name")

    if fig_width != None:
        plt.figure(figsize=(fig_width, fig_width / 2.5))

    for s in states:
        plt.plot(data_em["name"], data_em[f"{s}_em"], marker="o")

    plt.xlabel("Dihedral angle " + x_title + ", degree", fontsize=14, fontweight="bold")
    plt.ylabel(
        "Electric and magnetic dipole moments angle, degree",
        fontsize=11.5,
        fontweight="bold",
    )

    if show_legend:
        plt.legend(states, loc="upper right", frameon=False)
    plt.grid(False)
    plt.xticks(data_em.name)
    if y_lim != None:
        plt.ylim(y_lim[0], y_lim[1])
    plt.savefig(subpath + "/images/em_angle.png", dpi=300)
    plt.show()


def get_spectra(
    subpath: str,
    x_lim: list = [None, None],
    y_lim: list = [None, None],
    special_style:list = [],
    legend_from_file: str = None,
):
    
    """
    Creates a chart with ecd spectra from Gaussian .txt files

        Parameters:
    - subpath (str): path to folder that conatains Gaussian ecd .txt file
    - x_lim (list): list of 2 numbers [left_limit, right_limit]. Default [None, None]    
    - y_lim (list): list of 2 numbers [lower_limit, upper_limit]. Default [None, None]  
    - special_style: (list): ECD for conformers in this list will be plotted with dashed line
    - legend_from_file (str): file name with legend. Default None 

        Returns:
    - creates spectra.png chart
    - dataframe with all ecd spectra from folder
    
    """
    df = pd.DataFrame()
    for i in os.listdir(subpath):  
        try:
            df_tmp = pd.read_csv(subpath + i, sep="\s+", header=None, skiprows=16)
            df_tmp["file"] = i
            df = pd.concat([df, df_tmp])
        except:
            print("no such file")
    print(df)
    df.columns = ["X", "Y", "XY", "file"]
    df.head(2)
    print(df)

    if legend_from_file == None:
        legend = []
        df["file"] = df["file"].apply(lambda x: int(x.split(".")[0]))
        for i in sorted(df.file.unique()):
            legend.append(str(i) + "\u00b0")

    else:
        with open(legend_from_file, "r") as file:
            legend = file.readlines()
            legend = [line.strip() for line in legend]

    for m in sorted(df.file.unique()):
        df_tmp = df[df["file"] == m]
        if m in special_style:
            plt.plot(df_tmp["X"], df_tmp["Y"], linewidth=3, linestyle="dashed")
        else:
            plt.plot(df_tmp["X"], df_tmp["Y"], linewidth=3)

        legend_plt = plt.legend(legend, loc="upper right", frameon=False, fontsize=11.8)
        for text in legend_plt.get_texts():
            text.set_fontweight("bold")

        plt.ylim(y_lim[0], y_lim[1])

        plt.xlim(x_lim[0], x_lim[1])
        plt.xlabel("Wavelength, nm", fontsize=15, fontweight="bold")
        plt.ylabel("Rotatory strengths, cgs", fontsize=15, fontweight="bold")
        plt.xticks(fontsize=12)
        plt.yticks(fontsize=12)
        plt.title("CD spectra", fontsize=15)
        plt.savefig(subpath + "spectra.png", dpi=300)

    plt.show()
    return df

